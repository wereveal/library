/*! Various Mixins */
@use "sass:map";
@use "sass:color";
@use "colors" as default-colors;
@use "variables" as default-vars;
@use "functions" as dfun;

@mixin rounded($radius) {
  border-radius: $radius;
}

@mixin wide($width) {
  width: $width;
}

@mixin wideRem($width) {
  width: 1rem * $width;
}

@mixin borderSize($size, $where, $what, $when) {
  $size: 1rem * $size;
  @if $when != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    border-top: $size;
  } @else if $where == 'bottom' {
    border-bottom: $size;
  } @else if $where == 'left' {
    border-left: $size;
  } @else if $where == 'right' {
    border-right: $size;
  } @else if $where == 'tb' {
    border-top: $size;
    border-bottom: $size;
  } @else if $where == 'lr' {
    border-left: $size;
    border-right: $size;
  } @else {
    border: $size;
  }
  @if $what != '' {
    border-style: $what;
  }
}

@mixin contentBlockHeader($colorText, $colorBg) {
  color: $colorText;
  background-color: $colorBg;
  font-variant: small-caps;
  padding-left: 1rem;
  padding-top: .25rem;
  padding-bottom: .25rem;
  margin-bottom: 1rem;
  font-size: 1.25rem;
}

@mixin contentBlock($colorScheme: 'gray') {
  $borderSize: 0;
  $borderRadius: .25rem;
  $colorBg: default-colors.$gray-med-dark;
  $colorText: default-colors.$color-lightest;
  $padding-size: 0;

  @if $colorScheme == 'gray' {
    $borderSize: 1px;
    $colorBg: default-colors.$gray-med-dark;
    $colorText: default-colors.$color-lightest;
  } @else if $colorScheme == 'green' {
    $borderSize: 1px;
    $colorBg: default-colors.$green-dark;
    $colorText: default-colors.$green-lightest;
  } @else if $colorScheme == 'blue' {
    $borderSize: 1px;
    $colorBg: default-colors.$blue-dark;
    $colorText: default-colors.$blue-lightest;
  } @else if $colorScheme == 'red' {
    $borderSize: 1px;
    $colorBg: default-colors.$red-dark;
    $colorText: default-colors.$red-lightest;
  } @else if $colorScheme == 'orange' {
    $borderSize: 1px;
    $colorBg: default-colors.$orange-darker;
    $colorText: default-colors.$orange-lightest;
  } @else if $colorScheme == 'light' {
    $borderSize: 1px;
    $colorBg: default-colors.$color-lightest;
    $colorText: default-colors.$gray-med-dark;
  } @else if $colorScheme == 'dark' {
    $borderSize: 1px;
    $colorBg: default-colors.$gray-med-dark;
    $colorText: default-colors.$color-lightest;
  } @else if $colorScheme == 'footer' {
    $padding-size: 1rem;
    $borderRadius: 0;
    display: flex !important;
  } @else if $colorScheme == 'header' {
    $padding-size: 1rem;
    $borderRadius: 0;
  }
  border: $borderSize solid $colorBg;
  border-radius: $borderRadius;
  padding: $padding-size;
  h1, h2, h3, h4, h5, h6 {
    @include contentBlockHeader($colorText, $colorBg);
  }
}

@mixin marginSize($size, $where, $when) {
  $size: 1rem * $size;
  @if $when != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    margin-top: $size;
  } @else if $where == 'bottom' {
    margin-bottom: $size;
  } @else if $where == 'left' {
    margin-left: $size;
  } @else if $where == 'right' {
    margin-right: $size;
  } @else if $where == 'tb' {
    margin-top: $size;
    margin-bottom: $size;
  } @else if $where == 'lr' {
    margin-left: $size;
    margin-right: $size;
  } @else {
    margin: $size;
  }
}

@mixin marginSizePx($size, $where, $when) {
  @if $when != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    margin-top: $size;
  } @else if $where == 'bottom' {
    margin-bottom: $size;
  } @else if $where == 'left' {
    margin-left: $size;
  } @else if $where == 'right' {
    margin-right: $size;
  } @else if $where == 'tb' {
    margin-top: $size;
    margin-bottom: $size;
  } @else if $where == 'lr' {
    margin-left: $size;
    margin-right: $size;
  } @else {
    margin: $size;
  }
}

@mixin paddingSize($size: 1, $where: 'top', $important: '') {
  $size: 1rem * $size;
  @if $important != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    padding-top: $size;
  } @else if $where == 'bottom' {
    padding-bottom: $size;
  } @else if $where == 'left' {
    padding-left: $size;
  } @else if $where == 'right' {
    padding-right: $size;
  } @else if $where == 'tb' {
    padding-top: $size;
    padding-bottom: $size;
  } @else if $where == 'lr' {
    padding-left: $size;
    padding-right: $size;
  } @else {
    padding: $size;
  }
}

@mixin paddingSizePx($size, $where, $when) {
  $size: $size * 1px;
  @if $when != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    padding-top: $size;
  } @else if $where == 'bottom' {
    padding-bottom: $size;
  } @else if $where == 'left' {
    padding-left: $size;
  } @else if $where == 'right' {
    padding-right: $size;
  } @else if $where == 'tb' {
    padding-top: $size;
    padding-bottom: $size;
  } @else if $where == 'lr' {
    padding-left: $size;
    padding-right: $size;
  } @else {
    padding: $size;
  }
}

@mixin setFont($size, $weight, $style, $variant) {
  @if $size != '' {
    font-size: $size;
  }
  @if $weight != '' {
    font-weight: $weight;
  }
  @if $style != '' {
    font-style: $style;
  }
  @if $variant != '' {
    font-variant: $variant;
  }
}

@mixin fontMedium {
  font-weight: 500;
  font-style: normal;
}

@mixin fontBold {
  font-weight: 700;
  font-style: normal;
}

@mixin fontExtraBold {
  font-weight: 900;
  font-style: normal;
}

@mixin fontItalic {
  font-weight: 400;
  font-style: italic;
}

@mixin fontMediumItalic {
  font-weight: 500;
  font-style: italic;

}

@mixin fontBoldItalic {
  font-weight: 700;
  font-style: italic;
}

@mixin fontExtraBoldItalic {
  font-weight: 900;
  font-style: italic;
}

@mixin fontSmallCaps {
  font-weight: 500;
  font-style: normal;
  font-variant: small-caps;
}

@mixin fontSmallCapsBold {
  font-weight: 700;
  font-style: normal;
  font-variant: small-caps;
}

@mixin fontSmallCapsExtraBold {
  font-weight: 900;
  font-style: normal;
  font-variant: small-caps;
}

@mixin fontSmallCapsItalic {
  font-weight: 400;
  font-style: italic;
  font-variant: small-caps;
}

@mixin fontSmallCapsBoldItalic {
  font-weight: 700;
  font-style: italic;
  font-variant: small-caps;
}

@mixin fontSmallCapsXBoldItalic {
  font-weight: 900;
  font-style: italic;
  font-variant: small-caps;
}

@mixin listStyleNone {
  list-style-type: none;
}

@mixin messageColors($bkgd-color, $border-color, $body-color) {
  border: 3px solid $border-color;
  border-radius: default-vars.$default-radius;
  background-color: $bkgd-color;
  color: $body-color;
  padding: .5rem 1rem;

  hr {
    border-top-color: color.scale($border-color, $lightness: -5%);
  }
  .message-link {
    color: color.scale($body-color, $lightness: -10%);
  }
  .icon {
    margin-right: 1rem;
    float: left;
  }
}

@mixin fancyFieldset {
  border: 1px solid default-colors.$color-border;
  border-radius: default-vars.$default-radius;
  padding: .75rem;
  margin-bottom: .5rem;
}

@mixin fontFace($name, $path, $weight: false, $style: false, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + dfun.strReplace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    @if $weight != '' {
      font-weight: $weight;
    }
    @if $style != '' {
      font-style: $style;
    }
    src: $src;
  }
}

@mixin linearGradient($direction, $colors...) {
  @if dfun.isDirection($direction) == false {
    $colors: $direction, $colors;
    $direction: 180deg;
  }
  background: nth(nth($colors, 1), 1);
  background: linear-gradient($direction, $colors) no-repeat;
}

@mixin linearGradientTwoColor($start_color: black, $end_color: white, $direction: 180deg, $midpoint: 50%) {
  background: $start_color;
  background: linear-gradient($direction, $start_color, $midpoint, $end_color) no-repeat;
}

@mixin makeColorful($important: false) {
  @if $important {
    $important: !important;
  } @else {
    $important: '';
  }
  background: default-colors.$color-white $important;
  border-bottom: 1px solid default-colors.$color-black $important;
  border-left: 1px solid default-colors.$gray60 $important;
  border-right: 1px solid default-colors.$color-black $important;
  border-top: 1px solid default-colors.$gray60 $important;
  border-radius: 3px $important;
  @include paddingSize(.375, 'tb', 'true');
  @include paddingSize(.5, 'left', 'true');
}

@mixin makeColorfulFocused($important: false) {
  @if $important {
    $important: !important;
  } @else {
    $important: '';
  }
  background: default-colors.$blue-lightest $important;
  border-bottom: 1px solid default-colors.$blue-med-dark $important;
  border-left: 1px solid default-colors.$blue-dark $important;
  border-right: 1px solid default-colors.$blue-med-dark $important;
  border-top: 1px solid default-colors.$blue-dark $important;
  border-radius: 3px $important;
  @include paddingSize(.375, 'tb', 'true');
  @include paddingSize(.5, 'left', 'true');
}

@mixin headerRowColors($color: default-colors.$color-white, $bg-color: default-colors.$gray-med-dark, $force: true) {
  $important: '';
  @if $force {
    $important: !important;
  }
  color: $color $important;
  background-color: $bg-color $important;
}

@mixin colorRow($color: default-colors.$color-black, $bg-color: default-colors.$color-white) {
  color: $color;
  background-color: $bg-color;
  [class*="col"] {
    border: 0;
    padding: 0 .25rem;
    border-radius: 0;
    margin-top: .25rem;
    margin-bottom: .25rem;
    background-color: $bg-color;
    &.form-label {
      text-align: right;
      padding-right: 1rem;
      font-weight: 700;
    }
  }
}

@mixin setMediaSize($type: max, $max-bp: sm, $min-bp: xl, $breakpoints: default-vars.$grid-breakpoints) {
  $max: map.get($breakpoints, $max-bp);
  $min: map.get($breakpoints, $min-bp);
  @if ($type == 'max') {
    @media (max-width: $max) {
      @content;
    }
  } @else if ($type == 'min') {
    @media (min-width: $min) {
      @content;
    }
  } @else if ($type == 'both') {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
}

@mixin btn-variant($background, $border, $hover-background: color.scale($background, $lightness: -7.5%), $hover-border: color.scale($border, $lightness: -10%), $active-background: color.scale($background, $lightness: -10%), $active-border: color.scale($border, $lightness: -12.5%)) {
  color: dfun.contrastOf($background);
  @include linearGradient('to bottom', $background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  &:hover {
    color: dfun.contrastOf($hover-background);
    @include linearGradient('to bottom', $hover-background);
    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    color: dfun.contrastOf($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
    @if $enable-shadows {
      @include box-shadow($btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix(dfun.contrastOf($background), $border, 15%), .5));
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: 0 0 0 $btn-focus-width rgba(mix(dfun.contrastOf($background), $border, 15%), .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: dfun.contrastOf($background);
    background-color: $background;
    border-color: $border;
    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: dfun.contrastOf($active-background);
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      @if $enable-shadows and $btn-active-box-shadow != none {
        @include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix(dfun.contrastOf($background), $border, 15%), .5));
      } @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: 0 0 0 $btn-focus-width rgba(mix(dfun.contrastOf($background), $border, 15%), .5);
      }
    }
  }
}

@mixin btn-outline-variant($color, $color-hover: dfun.contrastOf($color), $active-background: $color, $active-border: $color) {
  color: $color;
  border-color: $color;

  &:hover {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: dfun.contrastOf($active-background);
    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      @if $enable-shadows and $btn-active-box-shadow != none {
        @include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5));
      } @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
      }
    }
  }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding: $padding-y $padding-x;
  @include font-size($font-size);
  line-height: $line-height;
  // Manually declare to provide an override to the browser default
  @include border-radius($border-radius, 0);
}

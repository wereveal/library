/*! Various Mixins */
@use "sass:map";
@use "sass:color";
@use "colors" as dc;
@use "../app/variables" as av;
@use "variables" as dvars;
@use "functions" as dfun;

@mixin rounded($radius) {
  border-radius: $radius;
}

@mixin wide($width) {
  width: $width;
}

@mixin wideRem($width) {
  width: 1rem * $width;
}

@mixin borderSize($size, $where, $what, $when) {
  $size: 1rem * $size;
  @if $when != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    border-top: $size;
  } @else if $where == 'bottom' {
    border-bottom: $size;
  } @else if $where == 'left' {
    border-left: $size;
  } @else if $where == 'right' {
    border-right: $size;
  } @else if $where == 'tb' {
    border-top: $size;
    border-bottom: $size;
  } @else if $where == 'lr' {
    border-left: $size;
    border-right: $size;
  } @else {
    border: $size;
  }
  @if $what != '' {
    border-style: $what;
  }
}

@mixin contentBlockHeader($colorText, $colorBg) {
  color: $colorText;
  background-color: $colorBg;
  font-variant: small-caps;
  padding-left: 1rem;
  padding-top: .25rem;
  padding-bottom: .25rem;
  margin-bottom: 1rem;
  font-size: 1.25rem;
}

@mixin contentBlock($colorScheme: 'gray') {
  $borderSize: 0;
  $borderRadius: .25rem;
  $colorBg: dc.$gray-lightest;
  $colorText: dc.$gray-dark;
  $padding-size: 0;

  @if $colorScheme == 'gray' {
    $borderSize: 1px;
    $colorBg: dc.$gray-dark;
    $colorText: dc.$gray-lightest;
  } @else if $colorScheme == 'green' {
    $borderSize: 1px;
    $colorBg: dc.$green-dark;
    $colorText: dc.$green-lightest;
  } @else if $colorScheme == 'blue' {
    $borderSize: 1px;
    $colorBg: dc.$blue-dark;
    $colorText: dc.$blue-lightest;
  } @else if $colorScheme == 'red' {
    $borderSize: 1px;
    $colorBg: dc.$red-dark;
    $colorText: dc.$red-lightest;
  } @else if $colorScheme == 'orange' {
    $borderSize: 1px;
    $colorBg: dc.$orange-darker;
    $colorText: dc.$orange-lightest;
  } @else if $colorScheme == 'light' {
    $borderSize: 1px;
    $colorBg: dc.$gray-lightest;
    $colorText: dc.$gray-dark;
  } @else if $colorScheme == 'dark' {
    $borderSize: 1px;
    $colorBg: dc.$gray-med-dark;
    $colorText: dc.$gray-lightest;
  } @else if $colorScheme == 'footer' {
    $padding-size: 1rem;
    $borderRadius: 0;
    display: flex !important;
  } @else if $colorScheme == 'header' {
    $padding-size: 1rem;
    $borderRadius: 0;
  }
  border: $borderSize solid $colorBg;
  border-radius: $borderRadius;
  padding: $padding-size;
  h1, h2, h3, h4, h5, h6 {
    @include contentBlockHeader($colorText, $colorBg);
  }
}

@mixin marginSize($size, $where, $when) {
  $size: 1rem * $size;
  @if $when != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    margin-top: $size;
  } @else if $where == 'bottom' {
    margin-bottom: $size;
  } @else if $where == 'left' {
    margin-left: $size;
  } @else if $where == 'right' {
    margin-right: $size;
  } @else if $where == 'tb' {
    margin-top: $size;
    margin-bottom: $size;
  } @else if $where == 'lr' {
    margin-left: $size;
    margin-right: $size;
  } @else {
    margin: $size;
  }
}

@mixin marginSizePx($size, $where, $when) {
  @if $when != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    margin-top: $size;
  } @else if $where == 'bottom' {
    margin-bottom: $size;
  } @else if $where == 'left' {
    margin-left: $size;
  } @else if $where == 'right' {
    margin-right: $size;
  } @else if $where == 'tb' {
    margin-top: $size;
    margin-bottom: $size;
  } @else if $where == 'lr' {
    margin-left: $size;
    margin-right: $size;
  } @else {
    margin: $size;
  }
}

@mixin paddingSize($size: 1, $where: 'top', $important: '') {
  $size: 1rem * $size;
  @if $important != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    padding-top: $size;
  } @else if $where == 'bottom' {
    padding-bottom: $size;
  } @else if $where == 'left' {
    padding-left: $size;
  } @else if $where == 'right' {
    padding-right: $size;
  } @else if $where == 'tb' {
    padding-top: $size;
    padding-bottom: $size;
  } @else if $where == 'lr' {
    padding-left: $size;
    padding-right: $size;
  } @else {
    padding: $size;
  }
}

@mixin paddingSizePx($size, $where, $when) {
  $size: $size * 1px;
  @if $when != '' {
    $size: $size !important;
  }
  @if $where == 'top' {
    padding-top: $size;
  } @else if $where == 'bottom' {
    padding-bottom: $size;
  } @else if $where == 'left' {
    padding-left: $size;
  } @else if $where == 'right' {
    padding-right: $size;
  } @else if $where == 'tb' {
    padding-top: $size;
    padding-bottom: $size;
  } @else if $where == 'lr' {
    padding-left: $size;
    padding-right: $size;
  } @else {
    padding: $size;
  }
}

@mixin setFont($size, $weight, $style, $variant) {
  @if $size != '' {
    font-size: $size;
  }
  @if $weight != '' {
    font-weight: $weight;
  }
  @if $style != '' {
    font-style: $style;
  }
  @if $variant != '' {
    font-variant: $variant;
  }
}

@mixin fontMedium {
  font-weight: 500;
  font-style: normal;
}

@mixin fontBold {
  font-weight: 700;
  font-style: normal;
}

@mixin fontExtraBold {
  font-weight: 900;
  font-style: normal;
}

@mixin fontItalic {
  font-weight: 400;
  font-style: italic;
}

@mixin fontMediumItalic {
  font-weight: 500;
  font-style: italic;

}

@mixin fontBoldItalic {
  font-weight: 700;
  font-style: italic;
}

@mixin fontExtraBoldItalic {
  font-weight: 900;
  font-style: italic;
}

@mixin fontSmallCaps {
  font-weight: 500;
  font-style: normal;
  font-variant: small-caps;
}

@mixin fontSmallCapsBold {
  font-weight: 700;
  font-style: normal;
  font-variant: small-caps;
}

@mixin fontSmallCapsExtraBold {
  font-weight: 900;
  font-style: normal;
  font-variant: small-caps;
}

@mixin fontSmallCapsItalic {
  font-weight: 400;
  font-style: italic;
  font-variant: small-caps;
}

@mixin fontSmallCapsBoldItalic {
  font-weight: 700;
  font-style: italic;
  font-variant: small-caps;
}

@mixin fontSmallCapsXBoldItalic {
  font-weight: 900;
  font-style: italic;
  font-variant: small-caps;
}

@mixin listStyleNone {
  list-style-type: none;
}

@mixin messageColors($bkgd-color, $border-color, $body-color) {
  border: 3px solid $border-color;
  border-radius: dvars.$default-radius;
  background-color: $bkgd-color;
  color: $body-color;
  padding: .5rem 1rem;

  hr {
    border-top-color: color.scale($border-color, $lightness: -5%);
  }
  .message-link {
    color: color.scale($body-color, $lightness: -10%);
  }
  .icon {
    margin-right: 1rem;
    float: left;
  }
}

@mixin fancyFieldset {
  border: 1px solid av.$tc-color-border;
  border-radius: dvars.$default-radius;
  padding: .75rem;
  margin-bottom: .5rem;
}

@mixin fontFace($name, $path, $weight: false, $style: false, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + dfun.strReplace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    @if $weight != '' {
      font-weight: $weight;
    }
    @if $style != '' {
      font-style: $style;
    }
    src: $src;
  }
}

@mixin linearGradient($direction, $colors...) {
  @if dfun.isDirection($direction) == false {
    $colors: $direction, $colors;
    $direction: 180deg;
  }
  background: nth(nth($colors, 1), 1);
  background: linear-gradient($direction, $colors) no-repeat;
}

@mixin linearGradientTwoColor($start_color: black, $end_color: white, $direction: 180deg, $midpoint: 50%) {
  background: $start_color;
  background: linear-gradient($direction, $start_color, $midpoint, $end_color) no-repeat;
}

@mixin makeColorful($important: false) {
  @if $important {
    $important: !important;
  } @else {
    $important: '';
  }
  background: dc.$color-white $important;
  border-bottom: 1px solid dc.$color-black $important;
  border-left: 1px solid dc.$gray60 $important;
  border-right: 1px solid dc.$color-black $important;
  border-top: 1px solid dc.$gray60 $important;
  border-radius: 3px $important;
  @include paddingSize(.375, 'tb', 'true');
  @include paddingSize(.5, 'left', 'true');
}

@mixin makeColorfulFocused($important: false) {
  @if $important {
    $important: !important;
  } @else {
    $important: '';
  }
  background: dc.$blue-lightest $important;
  border-bottom: 1px solid dc.$blue-med-dark $important;
  border-left: 1px solid dc.$blue-dark $important;
  border-right: 1px solid dc.$blue-med-dark $important;
  border-top: 1px solid dc.$blue-dark $important;
  border-radius: 3px $important;
  @include paddingSize(.375, 'tb', 'true');
  @include paddingSize(.5, 'left', 'true');
}

@mixin headerRowColors($color: dc.$color-white, $bg-color: dc.$gray-med-dark, $force: true) {
  $important: '';
  @if $force {
    $important: !important;
  }
  color: $color $important;
  background-color: $bg-color $important;
}

@mixin colorRow($color: dc.$color-black, $bg-color: dc.$color-white) {
  color: $color;
  background-color: $bg-color;
  [class*="col"] {
    border: 0;
    padding: 0 .25rem;
    border-radius: 0;
    margin-top: .25rem;
    margin-bottom: .25rem;
    background-color: $bg-color;
    &.form-label {
      text-align: right;
      padding-right: 1rem;
      font-weight: 700;
    }
  }
}

@mixin setMediaSize($type: max, $max-bp: sm, $min-bp: xl, $breakpoints: dvars.$grid-breakpoints) {
  $max: map.get($breakpoints, $max-bp);
  $min: map.get($breakpoints, $min-bp);
  @if ($type == 'max') {
    @media (max-width: $max) {
      @content;
    }
  } @else if ($type == 'min') {
    @media (min-width: $min) {
      @content;
    }
  } @else if ($type == 'both') {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
}

@mixin createBtn(
  $background,
  $border,
  $hover-bg: color.scale($background, $lightness: -7.5%),
  $hover-border: color.scale($border, $lightness: -10%),
  $active-bg: color.scale($background, $lightness: -10%),
  $active-border: color.scale($border, $lightness: -12.5%)) {
  color: dfun.chooseContrastColor($background);
  border-color: $border;
  @include linearGradientTwoColor($background,
    color.scale($background, $lightness: -10%));
  @if (dvars.$enable-shadows) {
    box-shadow: dvars.$btn-shadow-x, dvars.$btn-shadow-y, dvars.$btn-shadow-blur, dvars.$btn-shadow-color;
  }
  &:hover, &.hover, &:focus, &.focus {
    color: dfun.chooseContrastColor($hover-bg);
    @include linearGradientTwoColor($hover-bg,
      color.scale($hover-bg, $lightness: -10%));
    border-color: $hover-border;
  }
  &:focus, &.focus {
    @if (dvars.$enable-shadows) {
      box-shadow: dvars.$btn-shadow-x, dvars.$btn-shadow-y, dvars.$btn-shadow-blur, dvars.$btn-shadow-color;
    }
    @else {
      box-shadow: none;
    }
  }
  &.disabled, &:disabled {
    color: dfun.chooseContrastColor($background);
    background-color: $background;
    border-color: $border;
    background-image: none;
  }
  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: dfun.chooseContrastColor($active-bg);
    background-color: $active-bg;
    background-image: none;
    border-color: $active-border;
    &:focus {
      @if (dvars.$enable-shadows) {
        box-shadow: dvars.$btn-shadow-x, dvars.$btn-shadow-y, dvars.$btn-shadow-blur, dvars.$btn-shadow-color;
      }
      @else {
        box-shadow: none;
      }
    }
  }
}
@mixin createBtnOutline(
  $color,
  $color-hover: dfun.chooseContrastColor($color),
  $active-bg: color.scale($color, $lightness: -10%),
  $active-border: color.scale($color, $lightness: -12.5%)) {
    color: $color;
    border-color: $color;
    &:hover, &.hover, &:focus, &.focus {
      color: $color-hover;
      border-color: $active-bg !important;
      border-color: $active-border !important;
    }
    &:focus, &.focus {
      @if (dvars.$enable-shadows) {
        box-shadow: dvars.$btn-shadow-x, dvars.$btn-shadow-y, dvars.$btn-shadow-blur, dvars.$btn-shadow-color;
      }
      @else {
        box-shadow: none;
      }
    }
    &.disabled, &:disabled {
      background-color: transparent;
    }
    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
      color: dfun.chooseContrastColor($active-bg);
      background-color: $active-bg;
      background-image: none;
      border-color: $active-border;
      &:focus {
        @if (dvars.$enable-shadows) {
          box-shadow: dvars.$btn-shadow-x, dvars.$btn-shadow-y, dvars.$btn-shadow-blur, dvars.$btn-shadow-color;
        }
        @else {
          box-shadow: none;
        }
      }
    }
}
